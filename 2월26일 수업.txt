포함관계에서는 주소값을 넘길수 없다.
상속관계에서만 오버라이딩(같은 메소드를 한번더 선언하는것)이 나타난다.
오버라이딩 조건-이름,매개변수,리턴타입이 같아야 한다.


조상의 변수,생성자를 부를때는 this가 아니라 super를 쓴다.
조상이랑 자손에 똑같은 변수가 선언되어있을경우
this->자신의 인스턴스 변수, super-> 조상의 인스턴스 변수
오버라이딩시 super.조상메소드로 조상의 메소드를 불러와서 덮어쓴다.
상속시 조상의 생성자도 super로 불러와서 초기화 시켜야 하지만
미입력시 자동으로 삽입된다.(super();)

[Object클래스] - 최고조상(모든클래스의 조상이 된다)

상속이 안되있으면 자동으로 object를 상속받는다.
(상속을 정해놓으면 자손쪽에서 자동상속은 안이루어짐)-
단 조상은 object를 상속받기때문에 자손도 object를 사용할수 있다.
                             object-조상-자손

상속을 받았기 때문에 toString,equals 같은 메소드(11개)를 선언없이 사용할수 있음

Object는 모든 참조변수의 주소값을 다 받을수 있다.
변수든,클래스든

패키지(일종의 폴더)는 무조건 하나가 있어야한다. 
(없으면 자동으로 default패키지를 만듬)

패키지-클래스와 인터페이스의 묶음
서브패키지는 '.'으로 구분


접근제어자에 의해 같은패키지 내에서만 접근가능하게 할수있다.
접근제어자는 한군데에 두개를 붙일수 없다.(연달아 두개쓸수없다.)

클래스패스
클래스를 찾아가는 경로

import문
선언하면 클래스를 사용할때 패키지 경로를 안적어도 된다.
뒤에 *을 적으면 그 패키지안의 모든 클래스를 사용할수있다.(클래스명만 다른경우)
java.lang안의 클래스는 import없이 사용가능(컴파일시 자동삽입)
클래스 위에 선언됨

다형성--중요

제어자(클래스,변수,메소드에 사용)
접근제어자 -- public,protected,default,private (객체를 선언해도 사용못하게 할수있음)
                    접근제어자 안붙은것은 default(같은 패키지내에서 접근허용)
그외의 제어자 -- static,final,abstract..

final클래스 - 상속해줄수 없다.
final메소드 - 오버라이딩할수 없다.
final변수(멤버변수,지역변수) - 상수로 만든다.
final변수는 상수이지만 인스턴스 내에 선언이 되있을경우 생성자로 초기화를 시킬수 있다.
(바로 값을 집어넣지 않고 초기화 할때 넣는다)
카드의 경우 조커가 있을수 있으므로 상수를 고정해 놓지 않는다.


객체 참조변수의 주소값
==변수의 값과 같은 원리 

abstract-추상(미완성)  클래스,메소드에 사용
불완전한 클래스나 메소드를 표시
객체선언 불가 상속만 가능
상속받아서 정의 해야 한다.

접근제어자- public>protected>default>private
private-같은 클래스 내만 허용
default-같은 패키지 내만 허용
protected-같은 패키지내+다른패키지에서 상속받은 자손만 허용
public- 제한없음
(클래스에 붙일수 있는 접근제어자는 public,default밖에 못씀)

값을 보낼때 오류체크를 하는게 좋다.(지연방지)
웹에서는 자바스크립트로 체크된다. 

캡슐화-보안강화, 데이터 보호
클래스내의 변수를 private로 설정하여 setter/getter로 접근하게 한다.
--> 효과: 불필요한 부분을 안보이게, 내부 데이터 보호한다.

싱글톤 패턴 -객체가 오직하나밖에 안만들어짐(하나로 돌려써야 함)
어떤 객체를 만들어도 같은 주소값을 바라봄 
set을 없애서 읽을권한만 준다.(아니면 한가지만 쓸수있는 권한을 준다.
다만 한사람이 입력하면 공통적으로 적용됨)
사용하는 곳 : 현재시간 표시 등..

메소드로만 객체생성가능
생성된 하나의 객체만 생성되게 해줌


주의사항
메소드에 static(실행하자마자 실행)과 abstract(미완성된 메소드)을 함께사용할수 없음
클래스에 abstract(상속필요)과 final(상속불가)을 함께 사용할수 없음




