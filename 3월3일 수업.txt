인터페이스 계속
두 객체간의 연결,소통을 위한 중간 역할
설계와 구현을 분리
다른 클래스의 이름이 바뀌어도 사용하는 쪽에서 바꿀필요 없음

독립적인 개발이 가능

2중으로 캡슐화가 가능 

*표준화가 가능한것이 가장큰 장점*
대부분은 업무분장을 위해 사용

카드,성적처리

------------------------------인터페이스끝-------------------------------------

---------------------------------예외처리-------------------------------------

잘쓰진 않음(쓰는 경우 db와 통신시, 프린터 사용시)

예외: 프로그램의 오류(컴파일에러/런타임에러)
컴파일에러- 구동하기전에 생김(크게 문제안됨)
런타임에러- 구동중 에러(구현하다가 다운되는 경우, 심각한오류)
코딩상에러-이건 개발자가 처리
사용자가 잘못입력해서 생기는 예외(이거는 예외처리로 처리가능)

예외가 생겨도 다운되지 않게 할수 있다.

예외처리 목적: 시스템 다운을 막고,실행상태를 유지

처리구문 try-catch(Exception n)  (if-else구문과 문법이 비슷함) 

이중 try-catch문 도 있다.

예외를 고의적으로 발생시키기  Exception e=new Exception()-> 객체선언
                                        throw e; 예외 발생
사용할 상황이 되면 이클립스에서 일러줌(꼭 넣어야 하는 예외 처리)

최고조상인 Exception은 맨 밑단에 넣어야

printStackTrace 예외가 어디서,왜 생겼는지 알려줌

-- fianlly블럭(설치프로그램의 임시파일 삭제)
-예외와 관계없이 실행(공통적으로 실행되야 하는 구문이 있을때)
-try/catch문의 맨밑에 위치
-return을 만나도 실행됨
메소드를 실행하다가 예외가 발생할경우 호출한 곳으로 던져주라는 구문(덧붙여주는 것임)
호출한 곳에는 try-catch문이 있어야한다.

method () throws Exception1,Exception2..

예외 되던지기
예외를 처리하고 다시 예외를 던져줌 

----------------------------lang패키지----------------------------------------


