this--> 이름이 같은경우 클래스에 있는것을 호출한다는것을 표시할때
생성자에 사용될경우 제일 첫번째줄에 선언- 초기화
인스턴스 변수와 지역변수의 이름이 같을경우 구분하기 위해 사용
기존 생성자의 재사용

객체복사-생성자 이용--> Car(Car c)형태로

클래스 변수,인스턴스 변수는 생성시 자동초기화됨(지역변수는 초기화 필요)

지역변수 초기화 안할시 사용할때 에러남
같은 타입일경우 int i=0,j=0 사용가능

명시적초기화->초기화블럭->생성자초기화

초기화블럭
인스턴스 초기화-> {} ->모든 생성자에 공통으로 적용해야되는 부분이 있는경우(일련번호)
클래스 초기화 -> static{}

클래스 초기화 클래스가 실행될때 한번 실행
인스턴스 초기화 객체생성마다 실행

제품번호를 생성하는 법
클래스변수와 인스턴스변수 생성-> 초기화블럭(클래스변수 증가하여 대입) 실행

공통으로 실행되야 할 작업이 있어야 할 경우에만 초기화 블럭 사용.

객체지향 2

--상속--
기존 클래스를 재활용하는것(객체가 아니라)
조상-자손
자손extend조상
조상의 변수,메소드들을 물려받는다.

조상과 똑같은 내용을 다시 안쳐도됨(새로운 내용만 추가하면 됨)
무조건 전부 상속받아야함(단, 생성자 초기화 블럭은 제외된다.)

조상은 자손에게 영향을 미침
자손은 부모에게 영향을 안미침

공통적으로 관리해야 되는 부분- 관리의 용이성

상속이 많아지면 관리가 힘들어짐
상속을 사용할경우 구조도를 그려놔야함
->업그레이드가 필요할때 사용
-> ~는~이다.

--포함관계--  대부분 여기에 해당함
클래스내에 객체를 선언하는것
->전혀 관계없는 부분에 사용
-> ~는~를 가지고 있다.



